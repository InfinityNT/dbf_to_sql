from sqlalchemy import Column, Integer, String, DECIMAL, Boolean, Date, DateTime, Text, ForeignKey
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from src.database import Base

class Customer(Base):
    __tablename__ = "customers"
    
    id = Column(Integer, primary_key=True, index=True)
    numcli = Column(String(5), unique=True, nullable=False, index=True)
    nomcli = Column(String(200))
    calle = Column(String(60))
    numext = Column(String(10))
    colonia = Column(String(40))
    ciudad = Column(String(30), index=True)
    estado = Column(String(20))
    cp = Column(String(6))
    telefono = Column(String(30))
    fax = Column(String(20))
    clasif = Column(String(5))
    ventano = Column(DECIMAL(12,2))
    ultvent = Column(Date, index=True)
    atvent = Column(String(40))
    atcobr = Column(String(40))
    email1 = Column(String(40))
    email2 = Column(String(40))
    rfc = Column(String(13), index=True)
    limcred = Column(DECIMAL(12,2))
    saldo = Column(DECIMAL(12,2))
    pjedesc = Column(DECIMAL(5,2))
    diascred = Column(Integer)
    precioutil = Column(String(1))
    recepfac = Column(String(30))
    pagofac = Column(String(30))
    obs = Column(Text)
    numcta = Column(String(20))
    uid = Column(Integer)
    numvend = Column(String(5))
    obligareq = Column(Boolean, default=False)
    suspendido = Column(Boolean, default=False)
    direnvio = Column(Text)
    otrosdatos = Column(Text)
    impuesto1 = Column(DECIMAL(6,2))
    retencion1 = Column(DECIMAL(10,4))
    retencion2 = Column(DECIMAL(6,2))
    permitecod = Column(Boolean, default=False)
    llavecred = Column(Boolean, default=False)
    pais = Column(String(15))
    clavecli = Column(String(20))
    curp = Column(String(20))
    nomcomer = Column(String(40))
    cfgdatdoc = Column(Text)
    datosfe = Column(Text)
    statusweb = Column(Integer)
    claveweb = Column(String(32))
    numzona = Column(String(5))
    metodopago = Column(Text)
    metodousar = Column(String(2))
    numint = Column(String(10))
    usocfdi = Column(String(3))
    formapago = Column(String(2))
    implocal = Column(Text)
    condpago = Column(String(30))
    emailtw = Column(String(50))
    numidtrib = Column(String(40))
    idregimen = Column(String(3))
    created_at = Column(DateTime, default=func.now())
    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())

class Product(Base):
    __tablename__ = "products"
    
    id = Column(Integer, primary_key=True, index=True)
    numart = Column(String(20), unique=True, nullable=False, index=True)
    desc_product = Column(String(60))
    codigo = Column(String(20), index=True)
    unidad = Column(String(5))
    unidefa = Column(String(5))
    marca = Column(String(30), index=True)
    modelo = Column(String(30))
    linea = Column(String(5))
    familia = Column(String(5), index=True)
    categoria = Column(String(5))
    numdep = Column(String(11))
    valdep = Column(String(9))
    ubica = Column(String(10))
    series_control = Column(Boolean, default=False)
    impuesto1 = Column(DECIMAL(5,2))
    impuesto2 = Column(DECIMAL(5,2))
    numprov = Column(String(5))
    numprov1 = Column(String(5))
    numprov2 = Column(String(5))
    numprov3 = Column(String(5))
    ultcomp = Column(Date)
    ultcomp1 = Column(Date)
    ultcomp2 = Column(Date)
    ultcomp3 = Column(Date)
    ultvent = Column(Date, index=True)
    existencia = Column(DECIMAL(10,3))
    minimo = Column(DECIMAL(10,3))
    maximo = Column(DECIMAL(10,3))
    reorden = Column(DECIMAL(10,3))
    divisa = Column(String(1))
    precio1 = Column(DECIMAL(13,2))
    precio2 = Column(DECIMAL(13,2))
    precio3 = Column(DECIMAL(13,2))
    precio4 = Column(DECIMAL(13,2))
    precio5 = Column(DECIMAL(13,2))
    factor1 = Column(DECIMAL(6,4))
    factor2 = Column(DECIMAL(6,4))
    factor3 = Column(DECIMAL(6,4))
    factor4 = Column(DECIMAL(6,4))
    factor5 = Column(DECIMAL(6,4))
    ultcosto = Column(DECIMAL(13,5))
    ultcosto1 = Column(DECIMAL(12,4))
    ultcosto2 = Column(DECIMAL(13,5))
    ultcosto3 = Column(DECIMAL(13,5))
    maxcosto = Column(DECIMAL(13,5))
    costoactua = Column(DECIMAL(13,5))
    costopro = Column(DECIMAL(13,5))
    ventano = Column(DECIMAL(12,2))
    ventanoqty = Column(DECIMAL(12,2))
    activo = Column(Boolean, default=True, index=True)
    ultmaxcost = Column(Date)
    ultactcost = Column(Date)
    compano = Column(DECIMAL(12,2))
    companoqty = Column(DECIMAL(12,2))
    repyy = Column(Boolean, default=False)
    cant_defa = Column(Integer)
    excento = Column(Boolean, default=False)
    preciopub = Column(DECIMAL(10,2))
    preciof = Column(Boolean, default=False)
    servicio = Column(Boolean, default=False)
    fechamod = Column(Date)
    obs = Column(Text)
    usacaduc = Column(Boolean, default=False)
    usalotes = Column(Boolean, default=False)
    ventacorte = Column(DECIMAL(10,3))
    eskit = Column(Boolean, default=False)
    uid = Column(Integer)
    otrosdatos = Column(Text)
    pjedesc = Column(DECIMAL(6,2))
    oferta = Column(DECIMAL(12,4))
    insumo = Column(Boolean, default=False)
    peso = Column(DECIMAL(10,3))
    largo = Column(DECIMAL(10,3))
    ancho = Column(DECIMAL(10,3))
    altura = Column(DECIMAL(10,3))
    cantxcj = Column(Integer)
    foto = Column(String(30))
    fotos = Column(Text)
    idmarca = Column(String(5))
    preciov2 = Column(DECIMAL(12,5))
    preciov3 = Column(DECIMAL(12,5))
    preciov4 = Column(DECIMAL(12,5))
    preciov5 = Column(DECIMAL(12,5))
    ppubv2 = Column(DECIMAL(10,2))
    ppubv3 = Column(DECIMAL(10,2))
    ppubv4 = Column(DECIMAL(10,2))
    ppubv5 = Column(DECIMAL(10,2))
    vol2 = Column(DECIMAL(10,2))
    vol3 = Column(DECIMAL(10,2))
    vol4 = Column(DECIMAL(10,2))
    vol5 = Column(DECIMAL(10,2))
    statusweb = Column(Integer)
    clavesat = Column(String(8))
    implocal = Column(Boolean, default=False)
    fracaranc = Column(String(10))
    matpelig = Column(String(5))
    embalaje = Column(String(5))
    guiaid = Column(String(30))
    guiaiddesc = Column(String(60))
    esmatpelig = Column(Boolean, default=False)
    factorv2 = Column(DECIMAL(6,4))
    factorv3 = Column(DECIMAL(6,4))
    factorv4 = Column(DECIMAL(6,4))
    factorv5 = Column(DECIMAL(6,4))
    fraccok = Column(Boolean, default=False)
    created_at = Column(DateTime, default=func.now())
    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())

class Movement(Base):
    __tablename__ = "movements"
    
    id = Column(Integer, primary_key=True, index=True)
    tipodoc = Column(String(2), index=True)
    numdoc = Column(String(10), index=True)
    numpar = Column(String(3))
    numart = Column(String(20), ForeignKey("products.numart", ondelete="SET NULL"), index=True, nullable=True)
    precio = Column(DECIMAL(13,5))
    costo = Column(DECIMAL(13,5))
    costo2 = Column(DECIMAL(13,5))
    costopro = Column(DECIMAL(13,5))
    cant = Column(DECIMAL(10,3))
    pend = Column(DECIMAL(10,3))
    pendocant = Column(DECIMAL(10,3))
    empaque = Column(DECIMAL(10,3))
    devueltos = Column(DECIMAL(10,3))
    pjedesc = Column(DECIMAL(5,2))
    impuesto1 = Column(DECIMAL(5,2))
    impuesto2 = Column(DECIMAL(5,2))
    unidad = Column(String(5))
    docant = Column(String(15), index=True)
    obs = Column(Text)
    nseries = Column(Text)
    capaskit = Column(Text)
    pjedesc2 = Column(DECIMAL(6,2))
    pjedesc3 = Column(DECIMAL(6,2))
    pjedesc4 = Column(DECIMAL(6,2))
    lote = Column(String(20), index=True)
    pjedesc1 = Column(DECIMAL(6,2))
    promoid = Column(Integer)
    pendcanc = Column(DECIMAL(10,3))
    created_at = Column(DateTime, default=func.now())
    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())
    
    # Relationships
    product = relationship("Product", backref="movements")

class DBFFileState(Base):
    __tablename__ = "dbf_file_state"
    
    id = Column(Integer, primary_key=True, index=True)
    file_path = Column(String(500), unique=True, nullable=False)
    file_name = Column(String(100), nullable=False, index=True)
    last_modified = Column(DateTime, index=True)
    record_count = Column(Integer, default=0)
    last_processed = Column(DateTime, default=func.now())
    checksum_map = Column(Text)  # JSON string
    processing_status = Column(String(20), default='PENDING', index=True)
    error_message = Column(Text)

class SyncLog(Base):
    __tablename__ = "sync_log"
    
    id = Column(Integer, primary_key=True, index=True)
    file_path = Column(String(500), index=True)
    table_name = Column(String(50), index=True)
    operation_type = Column(String(20), nullable=False, index=True)
    record_count = Column(Integer, default=0)
    records_processed = Column(Integer, default=0)
    timestamp = Column(DateTime, default=func.now(), index=True)
    duration_ms = Column(Integer)
    success = Column(Boolean, default=True)
    error_message = Column(Text)